import discord
from discord.ext import commands
import asyncio
import sqlite3

from tgbot.config import DB_PATH, active_sessions
from proekt.data import database  # –º–æ–¥—É–ª—å –ë–î

class StartView(discord.ui.View):
    def init(self, bot):
        super().init(timeout=60)
        self.bot = bot

    @discord.ui.button(label="üîë –í—Ö–æ–¥", style=discord.ButtonStyle.primary)
    async def login_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        await self.create_thread_for_user(interaction, "login")

    @discord.ui.button(label="üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", style=discord.ButtonStyle.success)
    async def register_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        await self.create_thread_for_user(interaction, "register")

    async def create_thread_for_user(self, interaction, action_type):
        thread = await interaction.channel.create_thread(
            name=f"{action_type.capitalize()} - {interaction.user.name}",
            type=discord.ChannelType.private_thread,
            invitable=False
        )
        await thread.add_user(interaction.user)

        await thread.send(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {interaction.user.mention}!\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –∏–º—è –ø–∞—Ä–æ–ª—å –¥–ª—è {action_type}."
        )

        def check(m):
            return m.channel == thread and m.author == interaction.user

        try:
            msg = await self.bot.wait_for('message', check=check, timeout=60)
            username, password = msg.content.strip().split(maxsplit=1)

            if action_type == "register":
                result = database.register_user(username, password)
                await thread.send(result)
            elif action_type == "login":
                success = database.login_user(interaction.user.id, username, password)
                if success:
                    await thread.send(f"üîê –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –∫–∞–∫ {username}")
                else:
                    await thread.send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞.")
        except asyncio.TimeoutError:
            await thread.send("‚åõÔ∏è –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.")
        except Exception as e:
            await thread.send(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            await asyncio.sleep(300)
            await thread.delete()

# üß† Cog —Å –∫–æ–º–∞–Ω–¥–æ–π
class AuthCog(commands.Cog):
    def init(self, bot):
        self.bot = bot

    @commands.command()
    async def start(self, ctx):
        await ctx.send("üîê –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç!", view=StartView(self.bot))

# üì¶ Setup
async def setup(bot):
    await bot.add_cog(AuthCog(bot))
