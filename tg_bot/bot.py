import os
import logging
import asyncio
from aiogram import Bot, Dispatcher

from config import TOKEN, DB_PATH
from data.database import init_db
from commands import auth, ai, help, personalization, points

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
try:
    if not os.path.exists(DB_PATH):
        print(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏ {DB_PATH}, —Å–æ–∑–¥–∞—é...")
        init_db()
    else:
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞: {DB_PATH}")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    exit(1)

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def main():
    bot = Bot(token=TOKEN)
    dp = Dispatcher()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
    dp.include_router(auth.router)
    dp.include_router(ai.router)
    dp.include_router(help.router)
    dp.include_router(personalization.router)
    dp.include_router(points.router)

    logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())